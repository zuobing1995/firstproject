day15笔记：

迭代器iterator
什么是迭代器
  迭代器是访问可迭代对象的工具
  迭代器是指用iter(obj) 函数返回的对象(实例)
  迭代器可以用next(it) 函数获取可迭代对象的数据

iter()产生一个迭代器，next()用迭代器去获取可迭代对象的值
迭代器函数iter和next
  iter(iterable) 从可迭代对象中返回一个迭代器,iterable 必须是能提供一个迭代器的对象
  next(iterator) 从迭代器iterator中获取下一个记录,如果无法获取下一条记录,则触发StopIteration异常

  说明:
    迭代器只能向前取值,不会后退
    用iter函数可以返回一个可迭代对象的迭代器
  作用:
    迭代器对象能用next函数获取下一个元素.

  l=[1,3,5,7]
  it=iter(l)#让l提供一个能访问自己的迭代器
  next(it) #1 从迭代器中取值，当迭代器去获取l中一个元素
  next(it) #3
  next(it) #5
  next(it) #7
  next(it) #stopiteration 异常

  迭代器的用途
  用迭代器可以依次访问可迭代对象的数据，无序的可迭代是从小到大

见iter_1.py


生成器 generator
什么是生成器:
  生成器是能够动态提供数据的对象,生成器对象也是可迭代对象(实例)

生成器有两种:
  1. 生成器函数
  2. 生成器表达式

生成器函数的定义
  含有yield语句的函数是生成器函数,此函数被调用将返回一个生成器对象
  yield 翻译为(产生或生成)

yield 语句
  语法:
    yield 表达式
  说明:
    yield 用于 def 函数中,目的是将此函数作用生成器函数使用
    yield 用来生成数据,供迭代器的next(it) 函数使用
  示例见:
    myyield.py

生成器函数说明:
  生成器函数的调用将返回一个生成器对象,生成器对象是一个可迭代对象
  在生成器函数调用return 会触发一个StopIteration异常

  生成器函数的使用示例见:
    myinteger.py

生成器表达式
语法：

（表达式 for 变量 in 可迭代对象 [if 真值表达式])
作用：
用推导式创建一个新的生成器
if 子句可以省略
gen=(x**2 for i in range(1,5))
it=iter(gen)
print(next(it)) #1
print(next(it)) #4

生成器表达式和列表推导式的区别：
见gen_vs_list_comprehension.py

生成器是现用现生成，列表推导式是一次性生成静态数据

迭代工具函数：

作用是生成一个个性化的可迭代对象
函数： 
zip(iter1[, iter2[, ...]])  返回一个zip对象,此对象用于生成元组,此元组的个数由最小的可迭代对象决定

  enumerate(iterable[, start]) 生成带索引的枚举对象,返回迭代类型为索引-值对(index-value对),默认索引从零开始,也可以用start指定

zip示例：
numers=[10086,10000,10010,95588]
names=['中国移动','中国联通','中国电信']
for t in zip(numbers,names):
     print(t)
#(10086,中国移动)
 (10000,中国联通)
（10010，中国电信）
示例见zip.py

字节串和字节数组
字节串bytes (也叫字节序列)
  作用:
    存储以字节为单位的数据
    字节串是不可变的字节序列

字节:
  字节是由8个位(bit)组成的数据单位,是计算机进行数据管理的单位
  字节是用 0 ~ 255 范围内的整数表示的,字节是数据传输和数据存储的基本单位

  创建空字节串的字面值
  b''
  b""
  b""""""
  b''''''
  创建非空的字节串的字面值
  b'abcd'
  b"abcd"
  b'\x41\x42'

  字节串的构造函数：
  bytes()  生成一个空的字节串 等同于 b''
  bytes(整数可迭代对象) # 用可迭代对象初始化一个字节串
  bytes(整数n)  生成n个值为0的字节串
  bytes(字符串, encoding='utf-8')  用字符串转为编码生成一个字节串
  b=bytes()
  b=bytes(range(64,90))
  b=bytes(4)
  b=bytes('中文','utf-8')

  字节串的运算

  与其他的序列一样
  + += × ×=
  in not in 
  < <= 


  字节串和str的区别

  bytes 存储字节（0-255）
  str存储字符（用来表示文字信息，0-65535）

  bytes 和str转换
     编码（encode）
    str----------> bytes
    b=s.encode(encoding='utf-8')

    解码（decode）

    bytes ------->str

    s=b.decode(encoding='utf-8')
  
 序列
 str (不可变)
 list(可变)       ------>tuple(不可变)
 bytearray(可变) ------>bytes(不可变)

 bytearray
 
  bytearray()  生成一个空的字节串 等同于 b''
  bytearray(整数可迭代对象) # 用可迭代对象初始化一个字节串
  bytearray(整数n)  生成n个值为0的字节串
  bytearray(字符串, encoding='utf-8')  

字节数组支持索引和切片赋值