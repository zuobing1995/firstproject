集合 set
  集合的是可变的容器
  集合内的数据对象都是唯一的(不能重复多次的)
  集合是无序的存储结构，集合中的数据没有先后关系
  集合内的元素必须是不可变对象(不能用列表,字典,集合作为元素)
  集合是可迭代对象
  集合是相当于只有键没有值的字典(键则是集合的数据)

创建空集合
  s = set()

创建非空的集合的字面值
s={1,2,3}

集合的构造函数
set()创建空集合
set(可迭代对象) 用可迭代对象创建一个新的集合
s=set()
s={1,2,3,4}
s=set('abc') #{'a','b','c'}
s=set('aa')  #{'a'}
s=set({1:2,3:4}) #{1,3}
s=set(('abc',2:'3',TURE))  # 报错

python3中 不可变的数据类型

bool int float comlex str tuple frozenset bytes
None
可变的数据类型

list dict set bytearray

集合的运算
交集&  并集|  补集-   对称补集^   子集<  超集>   


&用于生成二个集合的交集
s1={1,2,3}
s2={2,3,4}
s1&s2  #{2,3}

|  生成两个集合的并集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 | s2  # s3 = {1, 2, 3, 4}

- 生成两个集合的补集 
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 - s2  # 生成属于s1但不属于s2的所有元 素的集合

^ 生成两个集合的对称补集(找出二个集合特有的元素)
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 ^ s2  # (s1 - s2) | (s2 - s1)
                # {1, 4}
                #(s1 | s2) - (s1&s2)
< 判断一个集合是另一个集合的子集
> 判断一个集合是另一个集合的超集
s1={1,2,3}
s2={2,3}
s1>s2  :s1是s2超集
s2<s1 : s2是s1的子集

集合是无序的


in/not in  
等同于字典in,not in,
  作于集合中，判断某个值是否存在于集合中

集合和字典的优点:
  in / not in运算符的判断速度快些

能用于集合的函数:
  len(x), max(x), min(x), sum(x), any(x), all(x)

集合是可迭代对象,可以用于for语句中


s.add(e) 添加数据e到集合,如果存在则不添加
s.remove(e)从集合中删除e,如果e不存在则会报错
s.discard(e)从集合中移除e,如果不存在则啥都不做
s.clear()
s.copy()
s.pop()随机删除一个元素,如果集合是空集报错
s.update(s2)  等同于s=s|s2
s.difference(s2) s-s2 返回属于s集合,但是不属于s2集合 (补集)
s.difference_update(s2)  等于s-=s2
s.intersection(s2)  等同于s&s2
s.intersection_update(s2) 等同于是是  s=s&(s2)
s.isdisjoint(s2)  s与s2交集为空返回true
s.issubset(s2) s和s2交集为非空返回true


集合推导式
是用可迭代对象创建集合的表达式
语法:

{表达式 for 变量 可迭代对象 if 真值表达式}

固定集合 frozenset
固定集合是不可变的,无序的,含有唯一元素的集合

作用:固定集合可以作为字典的键,也可以作为集合的值

固定集合的构造函数frozenset

frozenset(可迭代对象)

示例:

fz=frozenset('abcab')  #自动去重
fz=frozenset([1,2,3,4,5])

运算符:
& | - ^ in/not in   < > >= <= == != 等同于集合的运算

固定集合的方法:

相当于集合的全部方法去掉修改集合的方法


阶段总结:
数据类型:不可变类型:bool int float comlex str tuple frozenset bytes
None
       可变类型:list dict set bytearray


运算符: = - * / % // **
       < > <= >= == !=
       is is not 
       in  not in 
       and or not
       & | ^ ~ << >>
       +(正号) -(负号)
表达式:
     100
     100+200
     max(1,2,3) #函数调用也是表达式
     条件表达式
     全部的推导式:
      列表 ,字典 ,集合推导式(只有3种)
      x=....
      if ....
      while ...
      print(....)
语句:
    表达式 语句:
    print('hello')

    赋值语句:
    a=10
    x,y=100,10
    列表[整数表达式] = 表达式
    字典[键]=表达式

    循环语句:if while for break continue pass del 


函数:
    len(x) ,max(x) min(x) sum(x) any(x)  all(x)
    构造函数:
    bool(x) int(x) str() float() complex() list() 
    tuple() dict(),set() frozenset()

    abs() round(x)  四舍五入 pow(x,y,z)
    bin(x) oct(x) hex(x) chr(x)  ord()
    range()  input()  print()




函数:

     什么是函数
     函数是可以重复执行的语句块,可以重复的调用


     作用:
      用于封装语句块,提高代码的重用性
      定义用户级别的函数


      def 语句

      语法:

      def 函数名(形参列表):
           语句块(代码块)
    作用:
    用语句块创建一个函数,并用函数名变量绑定这个函数

  
    语法说明:
    1 函数名是变量,它用于绑定语句块
    2 函数有自己的名字空间,在函数外部不可以访问函数内部的变量,在函数的内部可以访问外部的变量 (要让函数处理外部的数据需要给函数传入一些数据)
    3 函数不需要传入参数时,形参列表可以为空
    4 语句块不能为空,如果为空填充pass

    函数调用

    函数名(实际调用传递参数)
    注:实参

    说明:
    1. 函数调用是一个表达式
    2. 如果函数内部没有return语句，函数调用完毕后返回None对象
    3. 如果函数需要返回其它的对象需要用到 return 语句


    return 语句:

    语法:
    return[表达式]   []代表可以省略


    作用:
    用于函数中结束当前函数的执行,返回到调用该函数的地方,同时返回一个对象的引用关系

    return语法说明:
    1.return 语句后跟表达式可以省略,省略后相当于none
    2.如果函数没没有return语句,则函数执行完最后一条语句后返回none(相当于在最后加了一条return none)
    实例:02.py
    





























